receivers:
  otlp:
    protocols:
      grpc:
  jmx/producer:
    jar_path: /opt/opentelemetry-jmx-metrics.jar
    endpoint: java-producer:5000
    target_system: jvm,kafka-producer
    collection_interval: 10s
    resource_attributes: 
      service.name: java-producer

  jmx/consumer:
    jar_path: /opt/opentelemetry-jmx-metrics.jar
    endpoint: java-consumer:5000
    target_system: jvm,kafka-consumer
    collection_interval: 10s  
    resource_attributes: 
      service.name: java-consumer

  jmx/broker:
    jar_path: /opt/opentelemetry-jmx-metrics.jar
    endpoint: broker:9101
    target_system: jvm,kafka
    collection_interval: 10s
    resource_attributes: 
      service.name: broker
    
exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"
    send_timestamps: true
    metric_expiration: 180m
    resource_to_telemetry_conversion:
      enabled: true 

  logging:
    loglevel: debug

  zipkin:
    endpoint: "http://zipkin:9411/api/v2/spans"
    format: proto

  jaeger:
    endpoint: jaeger:14250 
    tls:
      insecure: true

processors:
  batch:

extensions:
  health_check:
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions: [pprof, zpages, health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, zipkin, jaeger]
    metrics:
      receivers: [otlp, jmx/producer, jmx/consumer, jmx/broker]
      processors: [batch]
      exporters: [logging, prometheus]